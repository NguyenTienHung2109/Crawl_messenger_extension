#!/usr/bin/env python3
"""
Email Test Script
-----------------
Tests email sending functionality using the email_config.json configuration.

Usage:
    conda activate hungnt34
    python test_email.py
"""

import os
import json
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime


def load_email_config():
    """Load email configuration from email_config.json"""
    config_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'email_config.json')
    try:
        if os.path.exists(config_path):
            with open(config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
                return config
        else:
            print(f"❌ Config file not found: {config_path}")
            return None
    except Exception as e:
        print(f"❌ Error loading email config: {e}")
        return None


def test_email_connection():
    """Test email sending functionality"""
    print("=" * 60)
    print("📧 Email Connection Test")
    print("=" * 60)
    print()

    # Load config
    print("1️⃣  Loading email configuration...")
    config = load_email_config()
    if not config:
        print("❌ Failed to load configuration")
        return False

    if not config.get('enabled'):
        print("⚠️  Email is disabled in config. Set 'enabled': true to test.")
        return False

    print("✅ Configuration loaded")
    print()

    # Extract settings
    gmail_user = config.get('gmail_user')
    gmail_password = config.get('gmail_app_password')
    recipients = config.get('recipient_emails', [])

    # Support old format
    if not recipients:
        single_recipient = config.get('recipient_email')
        recipients = [single_recipient] if single_recipient else []

    if not isinstance(recipients, list):
        recipients = [recipients]

    recipients = [r for r in recipients if r]

    smtp_server = config.get('smtp_server', 'smtp.gmail.com')
    smtp_port = config.get('smtp_port', 587)

    # Display config
    print("📋 Configuration:")
    print(f"   Gmail User: {gmail_user}")
    print(f"   Gmail Password: {'*' * len(gmail_password) if gmail_password else 'NOT SET'}")
    print(f"   Recipients: {', '.join(recipients)}")
    print(f"   SMTP Server: {smtp_server}:{smtp_port}")
    print()

    # Validate
    if not all([gmail_user, gmail_password]) or not recipients:
        print("❌ Email configuration incomplete:")
        if not gmail_user:
            print("   - Missing 'gmail_user'")
        if not gmail_password:
            print("   - Missing 'gmail_app_password'")
        if not recipients:
            print("   - Missing 'recipient_emails'")
        return False

    print("✅ Configuration valid")
    print()

    # Test SMTP connection
    print("2️⃣  Testing SMTP connection...")
    try:
        server = smtplib.SMTP(smtp_server, smtp_port, timeout=10)
        print(f"✅ Connected to {smtp_server}:{smtp_port}")

        server.ehlo()
        print("✅ EHLO successful")

        server.starttls()
        print("✅ STARTTLS successful")

        server.login(gmail_user, gmail_password)
        print("✅ Login successful")
        print()

        # Send test email
        print("3️⃣  Sending test email...")

        # Create email
        msg = MIMEMultipart()
        msg['From'] = gmail_user
        msg['To'] = ', '.join(recipients)
        msg['Subject'] = f"🧪 Email Test - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"

        # Email body
        body = f"""
📧 Email Test Successful!

This is a test email from the Refinitiv Messenger Data Extractor.

🕒 Test Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
📡 Sent From: {gmail_user}
📬 Sent To: {', '.join(recipients)}
🖥️  Server: {smtp_server}:{smtp_port}

If you received this email, your email configuration is working correctly! ✅

---
🤖 Generated by test_email.py
"""

        msg.attach(MIMEText(body, 'plain'))

        # Send
        server.send_message(msg, from_addr=gmail_user, to_addrs=recipients)
        server.quit()

        print(f"✅ Email sent successfully to:")
        for recipient in recipients:
            print(f"   - {recipient}")
        print()

        print("=" * 60)
        print("✅ ALL TESTS PASSED!")
        print("=" * 60)
        print()
        print("🎉 Your email configuration is working correctly.")
        print("📬 Check your inbox for the test email.")
        print()
        return True

    except smtplib.SMTPAuthenticationError as e:
        print(f"❌ Authentication failed: {e}")
        print()
        print("💡 Troubleshooting:")
        print("   1. Make sure 2-Factor Authentication is enabled on Gmail")
        print("   2. Verify you're using an App Password (not regular password)")
        print("   3. Generate a new App Password if needed:")
        print("      https://myaccount.google.com/apppasswords")
        return False

    except smtplib.SMTPException as e:
        print(f"❌ SMTP error: {e}")
        print()
        print("💡 Troubleshooting:")
        print("   1. Check your internet connection")
        print("   2. Verify SMTP server and port are correct")
        print("   3. Check if your firewall is blocking the connection")
        return False

    except Exception as e:
        print(f"❌ Unexpected error: {e}")
        print(f"   Error type: {type(e).__name__}")
        import traceback
        print()
        print("📋 Full traceback:")
        traceback.print_exc()
        return False


if __name__ == '__main__':
    print()
    success = test_email_connection()

    if success:
        exit(0)
    else:
        exit(1)
